upstream djangonuxt-app {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response (in case the Unicorn master nukes a
        # single worker for timing out).
        server unix:/webapps/django-nuxt/run/gunicorn.sock fail_timeout=0;
}

server {

        listen      80;
	listen [::]:80;

        server_name djangonuxt.com www.djangonuxt.com;

        keepalive_timeout 5;
        client_max_body_size 4G;

        access_log /webapps/djangonuxt/logs/nginx-access.log;
        error_log /webapps/djangonuxt/logs/nginx-error.log;

	location = /favicon.ico {
                access_log off;
                log_not_found off;
        }
	location /.well-known/ {
                alias /webapps/djangonuxt/.well-known/;
        }
        location /static/ {
                alias /webapps/djangonuxt/static/;
        }
	location /media/ {
                alias /webapps/djangonuxt/media/;
        }
        location ~ ^/(api|admin)/? {

                # Allow cross domain requests.
                # http://marcel.zurreck.com/enable-cross-origin-requests-cors-nginx/
                add_header 'Access-Control-Allow-Origin' *;

                # An HTTP header important enough to have its own Wikipedia entry:
                # http://en.wikipedia.org/wiki/X-Forwarded-For
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                # Enable this if and only if you use HTTPS, this helps the application to
                # set the proper protocol for doing redirects:
                proxy_set_header X-Forwarded-Proto https;

                # Pass the Host header from the client so that redirects
                # can be set properly within the application.
                proxy_set_header Host $host;

                # We don't want nginx trying to do something clever with
                # redirects, we set the Host header above already.
                proxy_redirect off;
                proxy_pass http://djangonuxt-app;
        }
	location / {
		# try_files $uri $uri/ /index.html;
		proxy_pass http://localhost:3000;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
	        proxy_cache_bypass $http_upgrade;
	}

        listen      443 ssl http2; # managed by Certbot
	listen [::]:443 ssl http2 ipv6only=on; # managed by Certbot

        # Certbot stuff...

	if ($scheme != "https") {
                return 301 https://$host$request_uri;
	} # managed by Certbot
}
